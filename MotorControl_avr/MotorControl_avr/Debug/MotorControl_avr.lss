
MotorControl_avr.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001ba  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000012  00800060  000001ba  0000022e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000240  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000270  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000068  00000000  00000000  000002ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000927  00000000  00000000  00000314  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000072d  00000000  00000000  00000c3b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000482  00000000  00000000  00001368  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000a0  00000000  00000000  000017ec  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000393  00000000  00000000  0000188c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000233  00000000  00000000  00001c1f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000090  00000000  00000000  00001e52  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea eb       	ldi	r30, 0xBA	; 186
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 37       	cpi	r26, 0x72	; 114
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 c3 00 	call	0x186	; 0x186 <main>
  7a:	0c 94 db 00 	jmp	0x1b6	; 0x1b6 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <keypadConfig>:

	
void keypadConfig()
{
	//keyPad
	key_DDR = 0x0F; //input(row)	output(col)
  82:	8f e0       	ldi	r24, 0x0F	; 15
  84:	8a bb       	out	0x1a, r24	; 26
	key_Port = 0xFF; //pull-up		high 4 bit	
  86:	8f ef       	ldi	r24, 0xFF	; 255
  88:	8b bb       	out	0x1b, r24	; 27
  8a:	08 95       	ret

0000008c <keyRelease>:
}


uint8_t keyRelease()
{
	key_Port = 0xF0; //pullup
  8c:	80 ef       	ldi	r24, 0xF0	; 240
  8e:	8b bb       	out	0x1b, r24	; 27
	if(key_PIN == 0xF0)
  90:	99 b3       	in	r25, 0x19	; 25
  92:	81 e0       	ldi	r24, 0x01	; 1
  94:	90 3f       	cpi	r25, 0xF0	; 240
  96:	09 f0       	breq	.+2      	; 0x9a <keyRelease+0xe>
  98:	80 e0       	ldi	r24, 0x00	; 0
	{
		return 1;
	}
	return 0;
}
  9a:	08 95       	ret

0000009c <keyPress>:

uint8_t keyPress()
{
	uint8_t read_row = 0;
	
	key_Port = 0xF0;  //pull up
  9c:	80 ef       	ldi	r24, 0xF0	; 240
  9e:	8b bb       	out	0x1b, r24	; 27
	if((read_row = (key_PIN & 0xF0)) != 0xF0 )  // 0x ---- 0000  != 0x1111 0000
  a0:	29 b3       	in	r18, 0x19	; 25
  a2:	20 7f       	andi	r18, 0xF0	; 240
  a4:	20 3f       	cpi	r18, 0xF0	; 240
  a6:	81 f0       	breq	.+32     	; 0xc8 <keyPress+0x2c>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a8:	87 e8       	ldi	r24, 0x87	; 135
  aa:	93 e1       	ldi	r25, 0x13	; 19
  ac:	01 97       	sbiw	r24, 0x01	; 1
  ae:	f1 f7       	brne	.-4      	; 0xac <keyPress+0x10>
  b0:	00 c0       	rjmp	.+0      	; 0xb2 <keyPress+0x16>
  b2:	00 00       	nop
	{
		_delay_ms(20);
		if( read_row == (key_PIN & 0xF0))
  b4:	49 b3       	in	r20, 0x19	; 25
		{
			return 1;
  b6:	40 7f       	andi	r20, 0xF0	; 240
  b8:	50 e0       	ldi	r21, 0x00	; 0
  ba:	30 e0       	ldi	r19, 0x00	; 0
  bc:	81 e0       	ldi	r24, 0x01	; 1
  be:	42 17       	cp	r20, r18
  c0:	53 07       	cpc	r21, r19
  c2:	19 f0       	breq	.+6      	; 0xca <keyPress+0x2e>
  c4:	80 e0       	ldi	r24, 0x00	; 0
  c6:	08 95       	ret
		}
	}
	return 0;
  c8:	80 e0       	ldi	r24, 0x00	; 0
}
  ca:	08 95       	ret

000000cc <returnKey>:

char returnKey()
{
  cc:	cf 93       	push	r28
  ce:	40 e0       	ldi	r20, 0x00	; 0
  d0:	50 e0       	ldi	r21, 0x00	; 0
		   for(uint8_t i = 0;i<4; i++)
		   {
			   key_Port = 0xFF;  //set 1 all pins and pull up
  d2:	cf ef       	ldi	r28, 0xFF	; 255
			   cbi(key_Port, i); //set 0 each row
  d4:	e1 e0       	ldi	r30, 0x01	; 1
  d6:	f0 e0       	ldi	r31, 0x00	; 0

char returnKey()
{
		   for(uint8_t i = 0;i<4; i++)
		   {
			   key_Port = 0xFF;  //set 1 all pins and pull up
  d8:	cb bb       	out	0x1b, r28	; 27
			   cbi(key_Port, i); //set 0 each row
  da:	9b b3       	in	r25, 0x1b	; 27
  dc:	ba 01       	movw	r22, r20
  de:	9f 01       	movw	r18, r30
  e0:	04 2e       	mov	r0, r20
  e2:	02 c0       	rjmp	.+4      	; 0xe8 <returnKey+0x1c>
  e4:	22 0f       	add	r18, r18
  e6:	33 1f       	adc	r19, r19
  e8:	0a 94       	dec	r0
  ea:	e2 f7       	brpl	.-8      	; 0xe4 <returnKey+0x18>
  ec:	82 2f       	mov	r24, r18
  ee:	80 95       	com	r24
  f0:	89 23       	and	r24, r25
  f2:	8b bb       	out	0x1b, r24	; 27
  f4:	8d ee       	ldi	r24, 0xED	; 237
  f6:	92 e0       	ldi	r25, 0x02	; 2
  f8:	01 97       	sbiw	r24, 0x01	; 1
  fa:	f1 f7       	brne	.-4      	; 0xf8 <returnKey+0x2c>
  fc:	00 c0       	rjmp	.+0      	; 0xfe <returnKey+0x32>
  fe:	00 00       	nop
			   _delay_ms(3); //stablity
			   for(uint8_t j = 4; j<8; j++)
			   {
				   if(!CHECKBIT(key_PIN, j))
 100:	cc 99       	sbic	0x19, 4	; 25
 102:	32 c0       	rjmp	.+100    	; 0x168 <returnKey+0x9c>
 104:	0c c0       	rjmp	.+24     	; 0x11e <returnKey+0x52>
 106:	89 b3       	in	r24, 0x19	; 25
 108:	d9 01       	movw	r26, r18
 10a:	90 e0       	ldi	r25, 0x00	; 0
 10c:	02 2e       	mov	r0, r18
 10e:	02 c0       	rjmp	.+4      	; 0x114 <returnKey+0x48>
 110:	95 95       	asr	r25
 112:	87 95       	ror	r24
 114:	0a 94       	dec	r0
 116:	e2 f7       	brpl	.-8      	; 0x110 <returnKey+0x44>
 118:	80 fd       	sbrc	r24, 0
 11a:	0d c0       	rjmp	.+26     	; 0x136 <returnKey+0x6a>
 11c:	02 c0       	rjmp	.+4      	; 0x122 <returnKey+0x56>
 11e:	a4 e0       	ldi	r26, 0x04	; 4
 120:	b0 e0       	ldi	r27, 0x00	; 0
				   {
					   char select = keyPad[i][j-4];
 122:	66 0f       	add	r22, r22
 124:	77 1f       	adc	r23, r23
 126:	66 0f       	add	r22, r22
 128:	77 1f       	adc	r23, r23
 12a:	a6 0f       	add	r26, r22
 12c:	b7 1f       	adc	r27, r23
 12e:	a4 5a       	subi	r26, 0xA4	; 164
 130:	bf 4f       	sbci	r27, 0xFF	; 255
 132:	8c 91       	ld	r24, X
					   //seg_Port = select;
					   return select;
 134:	22 c0       	rjmp	.+68     	; 0x17a <returnKey+0xae>
 136:	83 ec       	ldi	r24, 0xC3	; 195
 138:	99 e0       	ldi	r25, 0x09	; 9
 13a:	01 97       	sbiw	r24, 0x01	; 1
 13c:	f1 f7       	brne	.-4      	; 0x13a <returnKey+0x6e>
 13e:	00 c0       	rjmp	.+0      	; 0x140 <returnKey+0x74>
 140:	00 00       	nop
 142:	2f 5f       	subi	r18, 0xFF	; 255
 144:	3f 4f       	sbci	r19, 0xFF	; 255
		   for(uint8_t i = 0;i<4; i++)
		   {
			   key_Port = 0xFF;  //set 1 all pins and pull up
			   cbi(key_Port, i); //set 0 each row
			   _delay_ms(3); //stablity
			   for(uint8_t j = 4; j<8; j++)
 146:	28 30       	cpi	r18, 0x08	; 8
 148:	31 05       	cpc	r19, r1
 14a:	e9 f6       	brne	.-70     	; 0x106 <returnKey+0x3a>
 14c:	83 ec       	ldi	r24, 0xC3	; 195
 14e:	99 e0       	ldi	r25, 0x09	; 9
 150:	01 97       	sbiw	r24, 0x01	; 1
 152:	f1 f7       	brne	.-4      	; 0x150 <returnKey+0x84>
 154:	00 c0       	rjmp	.+0      	; 0x156 <returnKey+0x8a>
 156:	00 00       	nop
 158:	4f 5f       	subi	r20, 0xFF	; 255
 15a:	5f 4f       	sbci	r21, 0xFF	; 255
	return 0;
}

char returnKey()
{
		   for(uint8_t i = 0;i<4; i++)
 15c:	44 30       	cpi	r20, 0x04	; 4
 15e:	51 05       	cpc	r21, r1
 160:	09 f0       	breq	.+2      	; 0x164 <returnKey+0x98>
 162:	ba cf       	rjmp	.-140    	; 0xd8 <returnKey+0xc>
				   }
				   _delay_ms(10);
			   }
			   _delay_ms(10);
		   }
		   return 'z';   	
 164:	8a e7       	ldi	r24, 0x7A	; 122
 166:	09 c0       	rjmp	.+18     	; 0x17a <returnKey+0xae>
 168:	83 ec       	ldi	r24, 0xC3	; 195
 16a:	99 e0       	ldi	r25, 0x09	; 9
 16c:	01 97       	sbiw	r24, 0x01	; 1
 16e:	f1 f7       	brne	.-4      	; 0x16c <returnKey+0xa0>
 170:	00 c0       	rjmp	.+0      	; 0x172 <returnKey+0xa6>
 172:	00 00       	nop
 174:	25 e0       	ldi	r18, 0x05	; 5
 176:	30 e0       	ldi	r19, 0x00	; 0
 178:	c6 cf       	rjmp	.-116    	; 0x106 <returnKey+0x3a>
}
 17a:	cf 91       	pop	r28
 17c:	08 95       	ret

0000017e <Config>:

void Config()
{

	//7segment
	seg_DDR = 0xFF;  //output
 17e:	8f ef       	ldi	r24, 0xFF	; 255
 180:	84 bb       	out	0x14, r24	; 20
	seg_Port = 0xFF;
 182:	85 bb       	out	0x15, r24	; 21
 184:	08 95       	ret

00000186 <main>:



int main(void)
{
	Config();
 186:	0e 94 bf 00 	call	0x17e	; 0x17e <Config>
	keypadConfig();
 18a:	0e 94 41 00 	call	0x82	; 0x82 <keypadConfig>
	
    while (1) 
    {
		//keypadInit();
		//_delay_ms(20);
		if(keyPress())
 18e:	0e 94 4e 00 	call	0x9c	; 0x9c <keyPress>
 192:	88 23       	and	r24, r24
 194:	e1 f3       	breq	.-8      	; 0x18e <main+0x8>
		{
			key = returnKey();
 196:	0e 94 66 00 	call	0xcc	; 0xcc <returnKey>
 19a:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <key>
			seg_Port = key;  
 19e:	85 bb       	out	0x15, r24	; 21
 1a0:	87 e8       	ldi	r24, 0x87	; 135
 1a2:	93 e1       	ldi	r25, 0x13	; 19
 1a4:	01 97       	sbiw	r24, 0x01	; 1
 1a6:	f1 f7       	brne	.-4      	; 0x1a4 <main+0x1e>
 1a8:	00 c0       	rjmp	.+0      	; 0x1aa <main+0x24>
 1aa:	00 00       	nop
			_delay_ms(20); //stable
			while(!keyRelease());
 1ac:	0e 94 46 00 	call	0x8c	; 0x8c <keyRelease>
 1b0:	88 23       	and	r24, r24
 1b2:	e1 f3       	breq	.-8      	; 0x1ac <main+0x26>
 1b4:	ec cf       	rjmp	.-40     	; 0x18e <main+0x8>

000001b6 <_exit>:
 1b6:	f8 94       	cli

000001b8 <__stop_program>:
 1b8:	ff cf       	rjmp	.-2      	; 0x1b8 <__stop_program>
